{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ACKNOWLEDGEMENTS Special thanks to Peter Szmrecsanyi for authoring the original version of this hands-on lab, \"Deploying WebSphere Application Server on AIX using Ansible Automation\" for IBM Client Engineering for Systems (Montpellier). In addition to the embedded video, IBMers and Business Partners can also download the recording from Seismic . Automation of nearly any infrastructure endpoint using minimal amounts of code has immense practical value to a world increasingly dependent on clouds operated by different vendors, in varying countries, across multiple premises. Implementation of modern automation solutions can likewise translate to a number of benefits for businesses of every size: reduced storage and resource burden placed on the machines to be automated; a much smaller footprint on these endpoints that could be hacked or exploited by malicious users; and most importantly, a greatly simplified approach to automation in general. As environments change and operating systems advance over time, the automation jobs underway and supported by these technologies can be easily modified in lockstep as well. Adaptability and extensibility are key ingredients in the longevity of any technology \u2014 and fortunately, the automation tooling for the hybrid multicloud era has those in abundance. Red Hat Ansible Automation Platform (AAP) commodifies the automation of everything else that applications, services, and containers need to run upon. That may include infrastructure provisioning, server deployments, IoT edge devices, script execution, and lots of other things that operations teams spend their time doing to \u201ckeep the lights on.\u201d AAP makes automation available to everyone with the lightest touch of human-readable snippets of code. TERMINOLOGY Ansible and AAP may be used interchangeably \u2014 and will be throughout the course of this lab work. Who uses AAP today? Many different and potentially siloed personas: IT Operators : These include automation administrators responsible for ensuring that the automation platform is available to developers and implementors upstream within the organization. These individuals are generally concerned with the uptime of the automation platform, as any interruptions to service availability can directly impact upstream users. Platform Developers : These individuals are the automation \"plumbers\" who ensure that endpoints are viable for automation. Tasks and responsibilities include maintaining the AAP modules, plugins, and the Roles (content) to be used by platform users. They are the domain experts that are coding up collections which can later be extended or consumed by the end-users of the automation jobs. Platform Users : These are the automation \"writers,\" stitching together each automation task\u2014 play by play, task by task \u2014using content generated by the Platform Developers within their Playbooks. Essentially, this is configuration management applied to the operations of IT estates. Instead of having a hardcoded script that instructs exactly how to move from task A to task B, you are creating a Playbook that lays out the expected end state and asks AAP to figure out the delta between the current and end state. But critically, AAP will not move on to task B until all of the conditions required by task A have been satisfied. This is not only invaluable for debugging purposes; it also guarantees a consistency and predictability to how AAP's automation tasks will be performed \u2014 something that you will come to keenly appreciate throughout this hands-on material, as we incrementally add more tasks and automation jobs to Playbooks for execution. Together, these qualities have two profound implications for AAP clients. First, it removes any ambiguity from the automation process: AAP will execute your instructions in exactly the order you\u2019ve assigned. Second, it places the burden of deciding how to achieve the end states of tasks A and B on the automation engine itself, rather than requiring the user to explicitly define all the gory details themselves. When automation is made available to everyone, it becomes possible to automate everything. The series of hands-on tutorials and learning modules embedded in this Level 3 course are designed to provide IBM Sellers, IBM Technical Sellers, and Business Partners with the fluency to gain trusted advisor status with clients and the expertise to tailor live technological demonstrations for customers. Throughout Red Hat Ansible Automation Platform Level 3 for Sales and Technical Sales , you will utilize AAP in conjunction with IBM Power Systems infrastructure (PowerVC) to generate an IBM AIX-based virtual machine; subsequently, Ansible automation will be used to install and deploy a live WebSphere Application Server instance inside of the virtual machine. The various ways in which AAP's automation can also be applied to operational and administrative tasks\u2014 such as modifying root user characteristics, setting filesystem sizes, installing pre-requisites drivers and libraries, as well as software deployments \u2014will also be explored. All modules are accompanied by recordings and narrated instructions, delivered by your team of authors. It is strongly recommended that IBM Sellers and Technical Sellers watch these recordings, as they will be useful for you as you go about creating and recording your own Stand & Deliver presentations for Level 3 accreditation. LEVEL 3 ACCREDITATION To receive Level 3 accreditation, IBMers and Business Partners must demonstrate mastery of the skills learned throughout the various modules of these hands-on labs and coursework. Level 3 accreditation requirements\u2014 and the way in which participants will be evaluated before receiving accreditation \u2014differs depending on job role. Business Partners must pass an accreditation quiz after completing the hands-on portion of the course. The quiz consists of multiple choice questions, with four possible responses (and only one correct answer) for each question. IBM Sales and Technical Sales must develop and record a Stand & Deliver presentation. This video is intended to simulate your delivery of a \u201clive\u201d demo in front of a client \u2014 on camera. IBMers will have flexibility in defining a hypothetical client, the pain points that customer has, and the goals they aspire to achieve. The recording must cover the seller\u2019s hands-on demonstration and pitch to the client of the value of the IBM solution using the environments and techniques covered in this lab. Specific criteria that must be demonstrated as part of the Stand & Deliver recordings is provided within the documentation that accompanies the Level 3 course . LOOKING FOR COURSEWORK? The material covered in this hands-on lab is part of accredited learning and badging for IBMers and business partners. Shortcuts to the respective learning plans are available below: IBM | Sellers | Technical Sellers Business Partners | Sellers | Technical Sellers","title":"Introduction"},{"location":"#_1","text":"","title":""},{"location":"#red-hat-ansible-automation-platform-aap-commodifies-the-automation-of-everything-else-that-applications-services-and-containers-need-to-run-upon","text":"That may include infrastructure provisioning, server deployments, IoT edge devices, script execution, and lots of other things that operations teams spend their time doing to \u201ckeep the lights on.\u201d AAP makes automation available to everyone with the lightest touch of human-readable snippets of code. TERMINOLOGY Ansible and AAP may be used interchangeably \u2014 and will be throughout the course of this lab work. Who uses AAP today? Many different and potentially siloed personas: IT Operators : These include automation administrators responsible for ensuring that the automation platform is available to developers and implementors upstream within the organization. These individuals are generally concerned with the uptime of the automation platform, as any interruptions to service availability can directly impact upstream users. Platform Developers : These individuals are the automation \"plumbers\" who ensure that endpoints are viable for automation. Tasks and responsibilities include maintaining the AAP modules, plugins, and the Roles (content) to be used by platform users. They are the domain experts that are coding up collections which can later be extended or consumed by the end-users of the automation jobs. Platform Users : These are the automation \"writers,\" stitching together each automation task\u2014 play by play, task by task \u2014using content generated by the Platform Developers within their Playbooks. Essentially, this is configuration management applied to the operations of IT estates. Instead of having a hardcoded script that instructs exactly how to move from task A to task B, you are creating a Playbook that lays out the expected end state and asks AAP to figure out the delta between the current and end state. But critically, AAP will not move on to task B until all of the conditions required by task A have been satisfied. This is not only invaluable for debugging purposes; it also guarantees a consistency and predictability to how AAP's automation tasks will be performed \u2014 something that you will come to keenly appreciate throughout this hands-on material, as we incrementally add more tasks and automation jobs to Playbooks for execution. Together, these qualities have two profound implications for AAP clients. First, it removes any ambiguity from the automation process: AAP will execute your instructions in exactly the order you\u2019ve assigned. Second, it places the burden of deciding how to achieve the end states of tasks A and B on the automation engine itself, rather than requiring the user to explicitly define all the gory details themselves.","title":"Red Hat Ansible Automation Platform (AAP) commodifies the automation of everything else that applications, services, and containers need to run upon."},{"location":"#_2","text":"","title":""},{"location":"#when-automation-is-made-available-to-everyone-it-becomes-possible-to-automate-everything","text":"The series of hands-on tutorials and learning modules embedded in this Level 3 course are designed to provide IBM Sellers, IBM Technical Sellers, and Business Partners with the fluency to gain trusted advisor status with clients and the expertise to tailor live technological demonstrations for customers. Throughout Red Hat Ansible Automation Platform Level 3 for Sales and Technical Sales , you will utilize AAP in conjunction with IBM Power Systems infrastructure (PowerVC) to generate an IBM AIX-based virtual machine; subsequently, Ansible automation will be used to install and deploy a live WebSphere Application Server instance inside of the virtual machine. The various ways in which AAP's automation can also be applied to operational and administrative tasks\u2014 such as modifying root user characteristics, setting filesystem sizes, installing pre-requisites drivers and libraries, as well as software deployments \u2014will also be explored. All modules are accompanied by recordings and narrated instructions, delivered by your team of authors. It is strongly recommended that IBM Sellers and Technical Sellers watch these recordings, as they will be useful for you as you go about creating and recording your own Stand & Deliver presentations for Level 3 accreditation. LEVEL 3 ACCREDITATION To receive Level 3 accreditation, IBMers and Business Partners must demonstrate mastery of the skills learned throughout the various modules of these hands-on labs and coursework. Level 3 accreditation requirements\u2014 and the way in which participants will be evaluated before receiving accreditation \u2014differs depending on job role. Business Partners must pass an accreditation quiz after completing the hands-on portion of the course. The quiz consists of multiple choice questions, with four possible responses (and only one correct answer) for each question. IBM Sales and Technical Sales must develop and record a Stand & Deliver presentation. This video is intended to simulate your delivery of a \u201clive\u201d demo in front of a client \u2014 on camera. IBMers will have flexibility in defining a hypothetical client, the pain points that customer has, and the goals they aspire to achieve. The recording must cover the seller\u2019s hands-on demonstration and pitch to the client of the value of the IBM solution using the environments and techniques covered in this lab. Specific criteria that must be demonstrated as part of the Stand & Deliver recordings is provided within the documentation that accompanies the Level 3 course . LOOKING FOR COURSEWORK? The material covered in this hands-on lab is part of accredited learning and badging for IBMers and business partners. Shortcuts to the respective learning plans are available below: IBM | Sellers | Technical Sellers Business Partners | Sellers | Technical Sellers","title":"When automation is made available to everyone, it becomes possible to automate everything."},{"location":"HPCS/01%20Introduction%20to%20HPCS/","text":"Introducing the IBM Cloud Hyper Protect Crypto Services (HPCS) Welcome to the HPCS Unified Key Orchestrator hands-on demo. In this module, you\u2019ll have a chance to work with a live IBM Cloud and AWS (and/or Azure environment) in order to experience the functionality of the IBM Cloud Hyper Protect Crypto Services Unified Key Orchestrator (HPCS UKO). Unified Key Orchestrator (UKO) is a multi-cloud key management solution offered as a managed service on IBM Cloud. Built on \u2018Keep Your Own Key\u2019 technology, UKO helps enterprises manage their data encryption keys over multiple key stores and across multiple clouds environments. These key environments include managed on-premises stores and keys on IBM Cloud, AWS, and Microsoft Azure. IBM TECHNOLOGY ZONE You will require access to the IBM Technology Zone (ITZ) in order to reserve your environment and complete the hands-on training. If you do not yet have access or an account with the ITZ, you may register for one by visiting the following page: https://techzone.ibm.com The hands-on environment can be provisioned free-of-charge using the reservation portal: https://techzone.ibm.com/collection/deploying-red-hat-ansible-on-ibm-power-with-aix/environments Reservations take approximately 15-20 minutes to provision and deploy. MULTIPLE ENVIRONMENT TEMPLATES IBM Technology Zone may display multiple configurations to choose from. Select the template that matches the screenshot above and continue with the reservation steps as documented. You may select the option to Reserve now (recommended) or Schedule for later . In order to complete your ITZ reservation of the PowerVC infrastructure, you must supply the following information: Name : Give your reservation a unique name. Purpose : Set to Practice / Self-Education and affirm that the environment will not be used with customer data. Purpose Description : Provide a brief summary of how the environment will be used. Preferred Geography : USA Start Date & Time : Select the time and date for when you plan to begin work on the hands-on material. End Date & Time : Select a time and date for when the reservation will expire. When satisfied, click the Check Availability button at the bottom of the page to verify that resources are available for your requested time slot. If the check passes, you can finalize your reservation request by clicking Submit . Accessing your ITZ reservation As a reminder, reservations take approximately 15-20 minutes to complete from the time that you click submit. If you navigate to the My Reservations tab of the ITZ ( https://techzone.ibm.com/my/reservations ), you can monitor the progress of your reservation. WAIT UNTIL READY Wait for the Tech Zone reservation to be marked as \" Ready \" before attempting to start the lab \u2014 accessing it too soon will lead to issues (or an outright failure) when connecting to the PowerVC instance. You will also receive an email to your inbox once the environment has successfully deployed, as shown here. The \"Your environment is ready\" email contains links back to the My Reservations tab, which now is populated with all of the details needed to access your PowerVC environment \u2014 hostnames, addresses, login information, and so on. Navigate to the page, which should look similar to the following screenshot. Note that your environment's details will differ. There are several critical pieces of information that you should record at this time, as they will be referenced again repeatedly in the steps to come. Save these values (unique to your environment) to a notepad: User Account : This will be cecuser for all environments. User Password : Unique to your environment. Use the clipboard icon to copy. VM 1 IP Address VM 2 IP Address VM 3 IP Address The three virtual machines (VMs) will correspond to the Ansible AIX host and server nodes once Ansible has been installed and deployed across the cluster. Connecting to the environment over SSH VPN ACCESS IBM employees and business partners will need to be connected to the IBM intranet via VPN in order to remotely SSH into the PowerVC cluster. If you are not connected via VPN, the connection attempt will time out. SSH and PuTTY - WINDOWS USERS For detailed instructions on how to connect with PuTTY on Windows, reference the linked material. You now have all the necessary information to remotely connect over SSH to the PowerVC cluster. To connect via SSH, it is recommended that you use Terminal (MacOS) or PuTTY (Windows). Connect via SSH using the following command: ssh UserAccount@VM_1_IPAddress Replace the UserAccount with the User Account ( cecuser ) recorded earlier. Similarly, replace the VM_1_IPAddress field with the IP address of VM 1 recorded earlier \u2014 use the value unique to your ITZ reservation . Press return and wait until you are prompted to provide a password : supply the User Password value recorded earlier. Hit Return and wait for the connection to complete. If successful, your console will now be connected directly to the PowerVC cluster. Installing Ansible on PowerVC The next order of business is deploying Ansible to the three nodes of the ITZ-provisioned PowerVC cluster. Before we can do this, we need to make some preparations to the environment. First, update the Dandified Yum ( DNF ) installer \u2014 which is now the officially supported software package manager for IBM Technology Zone, replacing yum and other alternatives. The following will update DNF to the latest version: sudo dnf update Indicate y when prompted to continue updating the 73 packages. You will also need to install Git in anticipation of some later modules in this course. Do so by executing the following command: sudo dnf install git Indicate y when prompted to continue installing the 7 packages. Next, use DNF to install Ansible . One of the remarkable features of Ansible\u2019s automation is how elegant and simple it makes even complex tasks like installing software across a cluster. Do so by executing the following: sudo dnf install ansible It's as simple as executing the following command and pressing y when prompted. Easy! Verify the integrity of your Ansible installation: ansible --version Next, we need to edit the /OPT/FREEWARE/ETC/ANSIBLE/ANSIBLE.CFG file in order to disable host_key_checking and to use Python as the default interpreter. Disabling host_key_checking will save you having to re-enter your password throughout the lab. Open the config file with the following: sudo vi /opt/freeware/etc/ansible/ansible.cfg Add the following two lines after the [Defaults] header: host_key_checking = False interpreter_python = /usr/bin/python Your configuration file should closely resemble the one in the following screenshot. When satisfied, save and exit ( :x ) the configuration file. Create a new /ANSIBLE-SCRIPTS directory: sudo mkdir $HOME/ansible-scripts In the Ansible HOSTS file, we will next need to supply the three IP addresses for the PowerVC cluster that were recorded earlier. One PowerVC virtual machine ( VM 1 ) will serve as the aixserver and the two other virtual machines ( VM 2 and VM 3 ) will act as the aixclients . ANSIBLE CONTROLLER NODE PowerVC Virtual Machine (VM) 1 in this environment has been designated in this step as the aixserver within the Ansible HOSTS file. This VM will also be referred to in subsequent sections as the Ansible Controller Node , as it serves the same purpose (as a server, controller, master, and so on) for Ansible automation as well. You need to put the IP address of each of your servers in this HOSTS file. Ansible supports hostname too, but this will not work here due to lack of a DNS-updated date on our test AIX servers. Execute the following statement to enter the vi editor: sudo vi /opt/freeware/etc/ansible/hosts At the top of the file, add the following to the top of the HOSTS configuration file. Modify the IP values to match the the VM addresses recorded earlier. Remember** \u2014 the aixserver corresponds to VM1 and aixclients corresponds to VM2 and VM2. [aixservers] 129.40.yy.xxx [aixclients] 129.40.yy.xxx 129.40.yy.xxx Your HOSTS file should closely resemble the following \u2014 using the IP addresses unique to your PowerVC cluster. When satisfied, save and exit ( :x ) the editor. SSH CONNECTIONS AND ANSIBLE A comment on generating SSH keys for cecuser (and Ansible clusters in general). Ansible is an agentless tool and it relies on SSH to connect to its targets. SSH is an open source secure connection used worldwide. Ansible supports both userID/password or password-free SSH connections. The environment you will be using to conduct this lab (provided by the ITZ) has taken care of SSH key generation ahead of time. No additional work is needed on your part in creating these keys. Let\u2019s verify the cluster\u2019s connectivity to the Ansible client endpoints you just defined. Execute the following while connected to VM1 (which you should be already at this stage): ansible aixclients -m ping This will ping the clients defined in the /HOSTS/ directory earlier. You should receive a response from both of the aixclients , indicating that you can run commands against this AIX LPAR without needing to provide a password each time. Next, we need to run the setup module to view the characteristics for each target ( aixclient ): ansible aixclients -m setup This module provides very extensive information in JSON format about each of your AIX clients. This information is essentially an Inventory of all your server\u2019s hardware and software. The information provided in the output can all be referenced inside an Ansible Playbook to customize your tasks. This is a more advanced feature of Ansible which we will cover later in the lab. Next, identify the hostnames for each of the aixclients group members using the command module \u2014 which is used for executing OS level commands on Ansible client endpoints. ansible aixclients -m command -a 'hostname' The hostname will be the first value returned in the string. Finally, before moving on to the lab proper, let's do a quick test against the host and clients using a simple script. Navigate back to the /ANSIBLE-SCRIPTS directory to begin: cd $HOME/ansible-scripts Create a local script called testscript.sh using the following: sudo vi testscript.sh Add the following instructions to your Shell script definition: echo \"Executing my testscript with parameter $1\" hostname date uptime oslevel -s exit When satisfied, save and exit ( :x ) the Shell script file. Change the permissions on the script file to make it executable: sudo chmod +x testscript.sh Lastly, execute the script across both clients: ansible aixclients -m script -a 'testscript.sh awesome' The output return to console should closely resemble the following screenshot. Everything's now set and in good shape for you to get to work on deploying your first virtual machine via Ansible on to the PowerVC infrastructure.","title":"Introduction to HPCS"},{"location":"HPCS/01%20Introduction%20to%20HPCS/#_1","text":"","title":""},{"location":"HPCS/01%20Introduction%20to%20HPCS/#introducing-the-ibm-cloud-hyper-protect-crypto-services-hpcs","text":"Welcome to the HPCS Unified Key Orchestrator hands-on demo. In this module, you\u2019ll have a chance to work with a live IBM Cloud and AWS (and/or Azure environment) in order to experience the functionality of the IBM Cloud Hyper Protect Crypto Services Unified Key Orchestrator (HPCS UKO). Unified Key Orchestrator (UKO) is a multi-cloud key management solution offered as a managed service on IBM Cloud. Built on \u2018Keep Your Own Key\u2019 technology, UKO helps enterprises manage their data encryption keys over multiple key stores and across multiple clouds environments. These key environments include managed on-premises stores and keys on IBM Cloud, AWS, and Microsoft Azure. IBM TECHNOLOGY ZONE You will require access to the IBM Technology Zone (ITZ) in order to reserve your environment and complete the hands-on training. If you do not yet have access or an account with the ITZ, you may register for one by visiting the following page: https://techzone.ibm.com The hands-on environment can be provisioned free-of-charge using the reservation portal: https://techzone.ibm.com/collection/deploying-red-hat-ansible-on-ibm-power-with-aix/environments Reservations take approximately 15-20 minutes to provision and deploy. MULTIPLE ENVIRONMENT TEMPLATES IBM Technology Zone may display multiple configurations to choose from. Select the template that matches the screenshot above and continue with the reservation steps as documented. You may select the option to Reserve now (recommended) or Schedule for later . In order to complete your ITZ reservation of the PowerVC infrastructure, you must supply the following information: Name : Give your reservation a unique name. Purpose : Set to Practice / Self-Education and affirm that the environment will not be used with customer data. Purpose Description : Provide a brief summary of how the environment will be used. Preferred Geography : USA Start Date & Time : Select the time and date for when you plan to begin work on the hands-on material. End Date & Time : Select a time and date for when the reservation will expire. When satisfied, click the Check Availability button at the bottom of the page to verify that resources are available for your requested time slot. If the check passes, you can finalize your reservation request by clicking Submit .","title":"Introducing the IBM Cloud Hyper Protect Crypto Services (HPCS)"},{"location":"HPCS/01%20Introduction%20to%20HPCS/#_2","text":"","title":""},{"location":"HPCS/01%20Introduction%20to%20HPCS/#accessing-your-itz-reservation","text":"As a reminder, reservations take approximately 15-20 minutes to complete from the time that you click submit. If you navigate to the My Reservations tab of the ITZ ( https://techzone.ibm.com/my/reservations ), you can monitor the progress of your reservation. WAIT UNTIL READY Wait for the Tech Zone reservation to be marked as \" Ready \" before attempting to start the lab \u2014 accessing it too soon will lead to issues (or an outright failure) when connecting to the PowerVC instance. You will also receive an email to your inbox once the environment has successfully deployed, as shown here. The \"Your environment is ready\" email contains links back to the My Reservations tab, which now is populated with all of the details needed to access your PowerVC environment \u2014 hostnames, addresses, login information, and so on. Navigate to the page, which should look similar to the following screenshot. Note that your environment's details will differ. There are several critical pieces of information that you should record at this time, as they will be referenced again repeatedly in the steps to come. Save these values (unique to your environment) to a notepad: User Account : This will be cecuser for all environments. User Password : Unique to your environment. Use the clipboard icon to copy. VM 1 IP Address VM 2 IP Address VM 3 IP Address The three virtual machines (VMs) will correspond to the Ansible AIX host and server nodes once Ansible has been installed and deployed across the cluster.","title":"Accessing your ITZ reservation"},{"location":"HPCS/01%20Introduction%20to%20HPCS/#_3","text":"","title":""},{"location":"HPCS/01%20Introduction%20to%20HPCS/#connecting-to-the-environment-over-ssh","text":"VPN ACCESS IBM employees and business partners will need to be connected to the IBM intranet via VPN in order to remotely SSH into the PowerVC cluster. If you are not connected via VPN, the connection attempt will time out. SSH and PuTTY - WINDOWS USERS For detailed instructions on how to connect with PuTTY on Windows, reference the linked material. You now have all the necessary information to remotely connect over SSH to the PowerVC cluster. To connect via SSH, it is recommended that you use Terminal (MacOS) or PuTTY (Windows). Connect via SSH using the following command: ssh UserAccount@VM_1_IPAddress Replace the UserAccount with the User Account ( cecuser ) recorded earlier. Similarly, replace the VM_1_IPAddress field with the IP address of VM 1 recorded earlier \u2014 use the value unique to your ITZ reservation . Press return and wait until you are prompted to provide a password : supply the User Password value recorded earlier. Hit Return and wait for the connection to complete. If successful, your console will now be connected directly to the PowerVC cluster.","title":"Connecting to the environment over SSH"},{"location":"HPCS/01%20Introduction%20to%20HPCS/#_4","text":"","title":""},{"location":"HPCS/01%20Introduction%20to%20HPCS/#installing-ansible-on-powervc","text":"The next order of business is deploying Ansible to the three nodes of the ITZ-provisioned PowerVC cluster. Before we can do this, we need to make some preparations to the environment. First, update the Dandified Yum ( DNF ) installer \u2014 which is now the officially supported software package manager for IBM Technology Zone, replacing yum and other alternatives. The following will update DNF to the latest version: sudo dnf update Indicate y when prompted to continue updating the 73 packages. You will also need to install Git in anticipation of some later modules in this course. Do so by executing the following command: sudo dnf install git Indicate y when prompted to continue installing the 7 packages. Next, use DNF to install Ansible . One of the remarkable features of Ansible\u2019s automation is how elegant and simple it makes even complex tasks like installing software across a cluster. Do so by executing the following: sudo dnf install ansible It's as simple as executing the following command and pressing y when prompted. Easy! Verify the integrity of your Ansible installation: ansible --version Next, we need to edit the /OPT/FREEWARE/ETC/ANSIBLE/ANSIBLE.CFG file in order to disable host_key_checking and to use Python as the default interpreter. Disabling host_key_checking will save you having to re-enter your password throughout the lab. Open the config file with the following: sudo vi /opt/freeware/etc/ansible/ansible.cfg Add the following two lines after the [Defaults] header: host_key_checking = False interpreter_python = /usr/bin/python Your configuration file should closely resemble the one in the following screenshot. When satisfied, save and exit ( :x ) the configuration file. Create a new /ANSIBLE-SCRIPTS directory: sudo mkdir $HOME/ansible-scripts In the Ansible HOSTS file, we will next need to supply the three IP addresses for the PowerVC cluster that were recorded earlier. One PowerVC virtual machine ( VM 1 ) will serve as the aixserver and the two other virtual machines ( VM 2 and VM 3 ) will act as the aixclients . ANSIBLE CONTROLLER NODE PowerVC Virtual Machine (VM) 1 in this environment has been designated in this step as the aixserver within the Ansible HOSTS file. This VM will also be referred to in subsequent sections as the Ansible Controller Node , as it serves the same purpose (as a server, controller, master, and so on) for Ansible automation as well. You need to put the IP address of each of your servers in this HOSTS file. Ansible supports hostname too, but this will not work here due to lack of a DNS-updated date on our test AIX servers. Execute the following statement to enter the vi editor: sudo vi /opt/freeware/etc/ansible/hosts At the top of the file, add the following to the top of the HOSTS configuration file. Modify the IP values to match the the VM addresses recorded earlier. Remember** \u2014 the aixserver corresponds to VM1 and aixclients corresponds to VM2 and VM2. [aixservers] 129.40.yy.xxx [aixclients] 129.40.yy.xxx 129.40.yy.xxx Your HOSTS file should closely resemble the following \u2014 using the IP addresses unique to your PowerVC cluster. When satisfied, save and exit ( :x ) the editor. SSH CONNECTIONS AND ANSIBLE A comment on generating SSH keys for cecuser (and Ansible clusters in general). Ansible is an agentless tool and it relies on SSH to connect to its targets. SSH is an open source secure connection used worldwide. Ansible supports both userID/password or password-free SSH connections. The environment you will be using to conduct this lab (provided by the ITZ) has taken care of SSH key generation ahead of time. No additional work is needed on your part in creating these keys. Let\u2019s verify the cluster\u2019s connectivity to the Ansible client endpoints you just defined. Execute the following while connected to VM1 (which you should be already at this stage): ansible aixclients -m ping This will ping the clients defined in the /HOSTS/ directory earlier. You should receive a response from both of the aixclients , indicating that you can run commands against this AIX LPAR without needing to provide a password each time. Next, we need to run the setup module to view the characteristics for each target ( aixclient ): ansible aixclients -m setup This module provides very extensive information in JSON format about each of your AIX clients. This information is essentially an Inventory of all your server\u2019s hardware and software. The information provided in the output can all be referenced inside an Ansible Playbook to customize your tasks. This is a more advanced feature of Ansible which we will cover later in the lab. Next, identify the hostnames for each of the aixclients group members using the command module \u2014 which is used for executing OS level commands on Ansible client endpoints. ansible aixclients -m command -a 'hostname' The hostname will be the first value returned in the string. Finally, before moving on to the lab proper, let's do a quick test against the host and clients using a simple script. Navigate back to the /ANSIBLE-SCRIPTS directory to begin: cd $HOME/ansible-scripts Create a local script called testscript.sh using the following: sudo vi testscript.sh Add the following instructions to your Shell script definition: echo \"Executing my testscript with parameter $1\" hostname date uptime oslevel -s exit When satisfied, save and exit ( :x ) the Shell script file. Change the permissions on the script file to make it executable: sudo chmod +x testscript.sh Lastly, execute the script across both clients: ansible aixclients -m script -a 'testscript.sh awesome' The output return to console should closely resemble the following screenshot. Everything's now set and in good shape for you to get to work on deploying your first virtual machine via Ansible on to the PowerVC infrastructure.","title":"Installing Ansible on PowerVC"}]}